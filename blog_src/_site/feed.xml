<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2017-07-22T18:27:25+05:30</updated><id>http://localhost:4000/blog/</id><title type="html">Salman Shah - Blog</title><subtitle>This is my technical blog where I'll be sharing insights to some of the projects that I have undertaken.</subtitle><entry><title type="html">Introduction to Intrumentation Tests in Android using Espresso</title><link href="http://localhost:4000/blog/ui-testing-android/" rel="alternate" type="text/html" title="Introduction to Intrumentation Tests in Android using Espresso" /><published>2017-07-18T00:00:00+05:30</published><updated>2017-07-18T00:00:00+05:30</updated><id>http://localhost:4000/blog/ui-testing-android</id><content type="html" xml:base="http://localhost:4000/blog/ui-testing-android/">&lt;p&gt;In the &lt;a href=&quot;/blog/unit-testing-android/&quot;&gt;previous tutorial&lt;/a&gt;, the article how to write a simple Unit Test for Android. This article however deals with Instrumentation Tests and how to get started with them for Android. Like the previous article, for this article we will re-use the same simple &lt;a href=&quot;https://github.com/salman-bhai/Calculator-Demo-App/tree/ui-testing&quot;&gt;Calculator App&lt;/a&gt; that we built.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Instrumentation tests they are also into the Junit package, but the control of the Android API is quite total because Instrumentation Tests are instantiated in the system before any application code is run, and to test you need to open the real application(emulator or a phone connected with USB).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To read more about the differences between Instrumentation Tests and Unit Tests, kindly refer &lt;a href=&quot;https://stackoverflow.com/questions/30393629/difference-between-android-instrumentation-test-and-unit-test-in-android-studio&quot;&gt;this StackOverflow answer&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;what-is-intrumentation-testing&quot;&gt;What is Intrumentation Testing?&lt;/h4&gt;

&lt;p&gt;Instrumentation tests are made to run on a Physical device or the Android emulator. In the background, the main app will be installed and then a testing app will also be installed which will control the main app, launching it and running UI tests as you hav edefined for your app. Instrumentation Tests are especially useful when you need to test code that has a dependency on a context.&lt;/p&gt;

&lt;h4 id=&quot;why-is-intrumentation-testing-needed&quot;&gt;Why is Intrumentation Testing needed?&lt;/h4&gt;

&lt;p&gt;As Android quotes it for us,&lt;/p&gt;
&lt;blockquote&gt;
&lt;em&gt;Using instrumented unit tests also helps to reduce the effort required to write and maintain mock code. You are still free to use a mocking framework, if you choose, to simulate any dependency relationships.&lt;/em&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instrumentation Testing is extremely important because after you have tested each and every Unit of your code via Unit Testing it is important to understand how the entire code base works when you combine all of the code together. Another important factor is the manner in which activities and fragments behave in Android. It is extremely difficult to manage these Android dependencies if you plan to use a mocking framework like Mockito along with a Unit Testing framework like Roboelectric.&lt;/p&gt;

&lt;h4 id=&quot;espresso---ui-testing-framework-for-android&quot;&gt;Espresso - UI Testing Framework for Android&lt;/h4&gt;

&lt;blockquote&gt;
&lt;em&gt;Espresso is a UI test framework (part of the Android Testing Support Library) that allows you to create automated UI tests for your Android app. Espresso tests run on actual device or emulator (they are instrumentation based tests) and behave as if an actual user is using the app (i.e. if a particular view is off screen, the test won't be able to interact with it).&lt;/em&gt;
&lt;/blockquote&gt;

&lt;p&gt;Espresso’s simple and extensible API, automatic synchronization of test actions with the UI of the app under test, and rich failure information make it a great choice for UI testing. It allows for automated testing where all actions undertaken by the user are performed by the test itself and thus if any activity isn’t loading on clicking, the test will automatically show an error for that.&lt;/p&gt;

&lt;h4 id=&quot;a-brief-tutorial-on-using-espresso&quot;&gt;A Brief Tutorial on using Espresso&lt;/h4&gt;

&lt;p&gt;So to get started you can either clone the Github repository &lt;a href=&quot;https://github.com/salman-bhai/Calculator-Demo-App/tree/ui-testing&quot;&gt;here&lt;/a&gt; or you can create a new app of your own and get code from this repository! Make sure you’re on the branch &lt;b&gt;ui-testing&lt;/b&gt; else you wont be able to view the code!&lt;/p&gt;

&lt;p&gt;You can start off by adding the Espresso dependency to the app build.gradle file. The Espresso Core library module might have a different gradle dependency for the Android Support Annotations library. To understand why this piece of code is necessary, check out this &lt;a href=&quot;https://stackoverflow.com/questions/33317555/conflict-with-dependency-com-android-supportsupport-annotations-resolved-ver&quot;&gt;link&lt;/a&gt; to know more about the same!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;androidTestCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;core:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;module:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After that you can go to app/java/&lt;project-name&gt;(androidTest) in the Android View and create a new class named &lt;em&gt;MainActivityUITest.java&lt;/em&gt; or edit the code in the existing &lt;em&gt;ExampleInstrumentedTest.java&lt;/em&gt; file itself and rename the file if possible! After that you can paste the exisiting code in the file below! This code can also be found [here](https://github.com/salman-bhai/Calculator-Demo-App/blob/ui-testing/app/src/androidTest/java/com/example/salman/calculatordemoapp/MainActivityUITest.java).&lt;/project-name&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidJUnit4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivityUITest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Rule&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActivityTestRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mActivityRule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActivityTestRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Specify a valid string.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;inp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;inp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output_add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;12.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkAddition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Type text and then press the button.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;input1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closeSoftKeyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;input2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closeSoftKeyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Check that the text was changed.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you can select run this Instrumented Test and select your own device that you have connected via a USB Cable or run it on the Android Emulator. Now let’s try to understand what the above code does!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Rule&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActivityTestRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mActivityRule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActivityTestRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Specify a valid string.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output_add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;12.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A &lt;b&gt;@Rule&lt;/b&gt; is used to define a definition or an object that you want to define for the test case that you are going to test your code on. For more information about &lt;a href=&quot;http://junit.org/junit4/javadoc/4.12/org/junit/Rule.html&quot;&gt;@Rule&lt;/a&gt; check out the link here. &lt;b&gt;@Before&lt;/b&gt; is used to initialize variables that may be used for the testcase. For more information about @Before check out this &lt;a href=&quot;http://junit.sourceforge.net/javadoc/org/junit/Before.html&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now these two annotations are primarily used for initializing variables and the Test Activity that is used to test the Main Activity.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkAddition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Type text and then press the button.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;input1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closeSoftKeyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;input2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closeSoftKeyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Check that the text was changed.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This method simulates the action of typing two numbers on the two EditText options respectively and then checking if the result text is displayed or not!&lt;/p&gt;

&lt;p&gt;All in all this is a very simple example of how Instrumented Tests work in Android! I’ve attached a list of resources that are useful below. Feel free to ping me in case you have any doubts on this or want to work on a project on this! Till next time this is &lt;b&gt;&lt;em&gt;salman-bhai&lt;/em&gt;&lt;/b&gt; signing off.&lt;/p&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests.html&quot;&gt;Building Instrumented Unit Tests - Android Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/salman-bhai/Calculator-Demo-App/tree/ui-testing&quot;&gt;Calculator Android App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://google.github.io/android-testing-support-library/docs/espresso/setup/index.html&quot;&gt;Espresso Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30393629/difference-between-android-instrumentation-test-and-unit-test-in-android-studio&quot;&gt;Difference between Instrumentation and Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Android" /><category term="Software Testing" /><summary type="html">In the previous tutorial, the article how to write a simple Unit Test for Android. This article however deals with Instrumentation Tests and how to get started with them for Android. Like the previous article, for this article we will re-use the same simple Calculator App that we built.</summary></entry><entry><title type="html">Introduction to Unit Testing in Android</title><link href="http://localhost:4000/blog/unit-testing-android/" rel="alternate" type="text/html" title="Introduction to Unit Testing in Android" /><published>2017-07-11T00:00:00+05:30</published><updated>2017-07-11T00:00:00+05:30</updated><id>http://localhost:4000/blog/unit-testing-android</id><content type="html" xml:base="http://localhost:4000/blog/unit-testing-android/">&lt;p&gt;Hi! This is a small tutorial and article on Unit Testing and why to use it in everyday development. I’ve made a small tutorial on how you can get started with Roboelectric. You can check out the sample code in the Github repository &lt;a href=&quot;https://github.com/salman-bhai/Calculator-Demo-App&quot;&gt;here&lt;/a&gt;. Feel free to leave your comments at the bottom of the page!&lt;/p&gt;

&lt;h4 id=&quot;what-is-unit-testing&quot;&gt;What is Unit Testing?&lt;/h4&gt;
&lt;blockquote&gt;
&lt;em&gt;Unit Testing is a software development process in which the smallest testable parts of an application, called units, are individually and independently scrutinized for proper operation. Unit testing can be done manually but is often automated.&lt;/em&gt;
&lt;/blockquote&gt;

&lt;p&gt;As with the above definition, Unit Testing allows developers to eradicate bugs and find them easily once they are done coding. A lot of developers have the habit of writing Unit Tests even before they have started to code their application! The major objective in Unit Testing is to isolate a unit and validate its correctness.&lt;/p&gt;

&lt;p&gt;Unit Testing allows developers to vaidate their code with a set of inputs and outputs that they’ve pre-defined in the code and check if the &lt;em&gt;expected output&lt;/em&gt; matches with the &lt;em&gt;actual output&lt;/em&gt;. Each major language has its own set of testing frameworks and libraries and no matter which &lt;b&gt;major&lt;/b&gt; language you choose to code there will always be a corresponding Testing Framework for that language!&lt;/p&gt;

&lt;h4 id=&quot;why-use-unit-testing&quot;&gt;Why use Unit Testing?&lt;/h4&gt;

&lt;p&gt;There is a certain myth that Unit Tests slows the process of development as you have to do the work of writing both Unit Tests and coding your application. Then why use Unit Testing if the application can be tested manually later?&lt;/p&gt;

&lt;p&gt;This claim however can be contradicted by the fact that Unit Tests allow Developers especially the ones who develop their applications iteratively (including me!), to waste less time on unaccounted bugs once the application is in Beta mode. A lot of time developers spend a lot of time correcting their code after it has been deployed and this can be easily reduced (though not completely avoided) using Unit Tests.&lt;/p&gt;

&lt;h4 id=&quot;roboelectric---using-unit-testing-for-android&quot;&gt;RoboElectric - Using Unit Testing for Android&lt;/h4&gt;

&lt;p&gt;Robolectric cannot test the interaction of Android components with the piece of code that you’ve written, i.e. Robolectric does not require additional mocking frameworks. However it is advisable to use mocking fraemworks like &lt;em&gt;Mockito&lt;/em&gt; if your code has interaction with Android components.&lt;/p&gt;

&lt;p&gt;Android has a huge set of libraries that can be used for Unit Testing. On a side note check out this &lt;a href=&quot;https://blog.devknox.io/10-android-libraries-developer-must-know/&quot;&gt;link&lt;/a&gt; to know more about some amazing libraries found for Android!&lt;/p&gt;

&lt;p&gt;The official documentation for Roboelectric can be found &lt;a href=&quot;http://robolectric.org/&quot;&gt;here&lt;/a&gt;. JUnit4 is one popular testing framework used as well but Roboelectric according is more adept at handling Unit Test cases specifically for Android.&lt;/p&gt;

&lt;h4 id=&quot;a-brief-tutorial-on-using-roboelectric&quot;&gt;A Brief Tutorial on using Roboelectric&lt;/h4&gt;

&lt;p&gt;So to get started you can either clone the Github repository &lt;a href=&quot;https://github.com/salman-bhai/Calculator-Demo-App&quot;&gt;here&lt;/a&gt; or you can create a new app of your own and get code from this repository!&lt;/p&gt;

&lt;p&gt;You can start off by adding the Roboelectric dependency to your &lt;strong&gt;app:build.gradle&lt;/strong&gt; &lt;a href=&quot;https://github.com/salman-bhai/Calculator-Demo-App/blob/v1.0/app/build.gradle&quot;&gt;file&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Add Roboelectric &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testCompile&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.robolectric:robolectric:3.3.2&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After that you can go to the Unit Tests directory and create a new file named &lt;b&gt;MainActivityUnitTest.java&lt;/b&gt; and add the following code to it. Your tests should be stored in the src/test directory.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RobolectricTestRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivityUnitTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Robolectric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldNotBeNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Congrats, you’ve run your first Unit Test and this is irrespective of writing any code in your Main Activity. Now let’s try to understand what we’ve done here!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RobolectricTestRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The class containing your Robolectric test must be annotate with the @RunWith(RobolectricGradleTestRunner.class) test runner. This is what is called a Runner in Java. For more information about a Runner, check out this &lt;a href=&quot;http://junit.sourceforge.net/javadoc/org/junit/runner/Runner.html&quot;&gt;link&lt;/a&gt;. It must also use the @Config() to point to your BuildConfig.class class. For more information about the BuildConfig Class check out this &lt;a href=&quot;http://www.digipom.com/be-careful-with-buildconfig-debug/&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Robolectric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next up let’s talk about this piece of code where the annotation @Before is used. &lt;em&gt;When writing tests, it is common to find that several tests need similar objects created before they can run. Annotating a public void method with @Before causes that method to be run before the Test method.&lt;/em&gt; The rest of the cod eis about setting up a Roboelectric Activity of the MainActivity class.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldNotBeNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is mandatory to annotate every piece of Java code with a &lt;b&gt;@Test&lt;/b&gt; annotation. This particular Unit Test only allows you to check if the Activity does not return a null object or not!&lt;/p&gt;

&lt;p&gt;All in all that’s all for this tutorial. I’ve attached a list of resources that are useful below. Feel free to ping me in case you have any doubts on this or want to work on a project on this! Till next time this is &lt;b&gt;&lt;em&gt;salman-bhai&lt;/em&gt;&lt;/b&gt; signing off.&lt;/p&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/testing/unit-testing/local-unit-tests.html&quot;&gt;Unit Testing - Android Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://robolectric.org/getting-started/&quot;&gt;Getting Started - Roboelectric&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/junit-team/junit4/wiki/getting-started&quot;&gt;Getting Started - JUnit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://site.mockito.org/&quot;&gt;Getting Started - Mockito&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/salman-bhai/Calculator-Demo-App&quot;&gt;GitHub - Calculator Demo App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Android" /><category term="Software Testing" /><summary type="html">Hi! This is a small tutorial and article on Unit Testing and why to use it in everyday development. I’ve made a small tutorial on how you can get started with Roboelectric. You can check out the sample code in the Github repository here. Feel free to leave your comments at the bottom of the page!</summary></entry><entry><title type="html">Sieve of Eratosthenes</title><link href="http://localhost:4000/blog/sieve-of-eratosthenes/" rel="alternate" type="text/html" title="Sieve of Eratosthenes" /><published>2017-07-04T00:00:00+05:30</published><updated>2017-07-04T00:00:00+05:30</updated><id>http://localhost:4000/blog/sieve-of-eratosthenes</id><content type="html" xml:base="http://localhost:4000/blog/sieve-of-eratosthenes/">&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;p&gt;The Sieve of Eratosthenes is an ancient technique to find Prime Numbers. It may be used to find primes in arithmetic progressions.&lt;/p&gt;

&lt;h4 id=&quot;concept&quot;&gt;Concept&lt;/h4&gt;

&lt;p&gt;The Sieve of Eratosthenes is one of the more efficient ways to find Prime Numbers given prime numbers are below a range of 10 million.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sieve-of-eratosthenes/sieve.gif&quot; alt=&quot;Sieve of Eratosthenes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A simple idea is to generate a list of numbers in a list or an array. Then each number which is a multiple of a prime number is eliminated turn by turn starting with 2. Sieve of Eratosthenes is a simple algorithm which eliminates the numbers based on the principle that a multiple of a number is not a prime number.&lt;/p&gt;

&lt;p&gt;The above GIF shows how the numbers are eliminated each and every number turn by turn.&lt;/p&gt;

&lt;h4 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h4&gt;

&lt;p&gt;Simple Algorithm to implement Sieve of Eratosthenes thereby printing a list of Prime Numbers till the number n.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s all for today! Kindly post any doubts that you’d have in the comments below!&lt;/p&gt;</content><author><name></name></author><category term="Algorithms" /><category term="Data Structures" /><summary type="html">Introduction</summary></entry><entry><title type="html">Introduction to Python - Part I</title><link href="http://localhost:4000/blog/introduction-to-python-part-1/" rel="alternate" type="text/html" title="Introduction to Python - Part I" /><published>2017-03-07T00:00:00+05:30</published><updated>2017-03-07T00:00:00+05:30</updated><id>http://localhost:4000/blog/introduction-to-python-part-1</id><content type="html" xml:base="http://localhost:4000/blog/introduction-to-python-part-1/">&lt;ul&gt;
  &lt;li&gt;Welcome to Part - I of the Tutorial Series Introduction to Python. This following series of tutorials  primarily deal about getting programmers with no programming experience to start using Python in their systems and showcase the power of Python across multiple domains and fields in Computer Science.&lt;/li&gt;
  &lt;li&gt;The aim at the end of these blog posts is to get readers acquainted with Python and to be able to use Python for any programming task that is needed across all domains.&lt;/li&gt;
  &lt;li&gt;This post is primarily divided into four parts:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;b&gt;About Python&lt;/b&gt;: History of Python.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;Why Python&lt;/b&gt;: Reasons for rise of Python.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;Installation&lt;/b&gt;: How to install in Ubuntu Systems.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;Hello World in Python&lt;/b&gt;: How to get started using Python.&lt;/li&gt;    
&lt;/ol&gt;

&lt;h4 id=&quot;about-python&quot;&gt;About Python&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Python is a general-purpose interactive, object-oriented, high-level yet at the same time interpreted programming language created in the period 1985-1990 by Guido van Rossum.&lt;/li&gt;
  &lt;li&gt;Python source code like one of the famous languages of the time Perl, is also available under the &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;GNU General Public License&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Python along with Ruby is basically designed for software programmers who need to learn programming from scratch or from start a language that focusses less on syntax and more on implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;why-python&quot;&gt;Why Python?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Python is easy to read and understand, so it is often recommended as a starter langauge. Often it is used to teach people who have no programming experience whatsoever about programming.&lt;/li&gt;
  &lt;li&gt;Python is basically used in situations where the speed of the program does not matter. In general, Python is used for rapid prototyping as also making software on a faster basis.&lt;/li&gt;
  &lt;li&gt;Python has loads of application and almost every industry uses Python in some manner or the other! Python in enterprise can be used in scripting, systems monitoring, logging tools, security scripts, etc. It can do also be used for web development, server side development(Flask, Sanic, Django) as also for gaming.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Python is installed by default on Ubuntu systems with Python 2.7 being the default version. Python 3.6 is currently installed by default in Ubuntu systems from Ubuntu 16.10 but for older versions of Ubuntu you can download the PPA using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The following instructions can be used to download the PPA for Python 3.6.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo add-apt-repository ppa:jonathonf/python-3.6
sudo apt-get update
sudo apt-get install python3.6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;To check which python version you are currently using you can type in the following command:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python --version&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 style=&quot;text-align:left;&quot;&gt;Note:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;In case you want to write your python programs in Python3 and follow along with this tutorial series(all programs in this tutorial series are in Python3), you can type in &lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt; while running your Python programs instead of just &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;For example to check the Python version, you can type in the following commands:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python3 --version&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;You will see that you would be getting the Python version as Python 3.x .&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hello-world-in-python&quot;&gt;Hello World in Python&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;For people familiar with Imperative languages like C or Object Oriented languages like C++ or Java, a simple program like Hello World takes multiple lines of code. For example, a Hello World program in Java would look something like this.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorldApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;However the same program in Python can be run from the Interactive Python Interpreter by typing the following commands in the terminal:
&lt;img src=&quot;/images/post4_img1.png&quot; alt=&quot;Hello World in Python&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That is all it takes to write a simple python program. Just one line is enough to write a simple Python program given the high level of abstraction that Python provides.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Python can also be written in your favourite text editor and save the name of the file as &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-world.py&lt;/code&gt;. Just open up your text editor and type in the following program.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;#!/usr/bin/python

print(&quot;Hello World&quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now open up your terminal and type in the follwing command to run the program.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python3 hello-world.py&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Voila! You’ll find your program running smoothly and without a glitch. Make sure you do this properly and in case you are getting an error make sure you copied all the instructions properly!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Thus we set up Python into our systems and even printed out a Hello World program using Python! In the next tutorial we’ll look at how to use Flow Control and Loops in Python.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Python" /><category term="OOP" /><summary type="html">Welcome to Part - I of the Tutorial Series Introduction to Python. This following series of tutorials primarily deal about getting programmers with no programming experience to start using Python in their systems and showcase the power of Python across multiple domains and fields in Computer Science. The aim at the end of these blog posts is to get readers acquainted with Python and to be able to use Python for any programming task that is needed across all domains. This post is primarily divided into four parts: About Python: History of Python. Why Python: Reasons for rise of Python. Installation: How to install in Ubuntu Systems. Hello World in Python: How to get started using Python.</summary></entry><entry><title type="html">Introduction to Git and GitHub - Part III</title><link href="http://localhost:4000/blog/introduction-to-git-part-3/" rel="alternate" type="text/html" title="Introduction to Git and GitHub - Part III" /><published>2017-02-27T00:00:00+05:30</published><updated>2017-02-27T00:00:00+05:30</updated><id>http://localhost:4000/blog/introduction-to-git-part-3</id><content type="html" xml:base="http://localhost:4000/blog/introduction-to-git-part-3/">&lt;ul&gt;
  &lt;li&gt;This post deals with the dreaded word of “Resolving Merge Conflicts” and how it isn’t as bad as we think it is!&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;This often happens when multiple people work on the same branch or when multiple branches are in play and they don’t get pushed sequentially!&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;The only thing you should remember in Git is you cannot break things. You can always go to your previous state and re-start your work again! It is saved as long as you push it properly!&lt;/li&gt;
  &lt;li&gt;Also, Git Merge Conflicts only occur on local systems not on the Git Server, so in case you are facing a Merge Conflict it will not stop your project, just your progress will be halted.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;what-are-merge-conflicts-and-how-do-they-occur&quot;&gt;What are Merge Conflicts and how do they occur?&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Git being a Version Control System, the act of ‘merging’ is simply adding your changes that you’ve made to your copy of the project repository to the main project repository and almost most of the time this process goes on smoothly.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;However there is a case when two or more people try to access the same file and make changes to it, there is a chance that Git might not be able to figure out what to do and this is where it leads to Merge Conflicts happenning.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Merge Conflicts usually occur in the case where ‘Delete Mode’ has occurred! If say, one user has deleted a file and another user has modified the contents of that file, then a Merge Conflict occurs!&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;how-to-resolve-a-merge-conflict&quot;&gt;How to resolve a Merge Conflict?&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;When faced with a Merge Conflict, the first step is to calm down and believe the end of the world isn’t here! After that try to understand what just happened.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Open up your terminal and enter the command &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; to see what has happened!&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;$ git status
# On branch contact-form
# You have unmerged paths.
#   (fix conflicts and run &quot;git commit&quot;)
#
# Unmerged paths:
#   (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)
#
#       both modified:   src/team.html
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;In this example, you can see that since both the users modified the file called team.html in the src folder a merge conflict has occurred. Now you can go to the file and see where the conflict is! If you open the file you will see a line as follows:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
&amp;lt;p&amp;gt; This repository is the work of Salman&amp;lt;/p&amp;gt;
=======
This repository is the work of Salman and Hrily&amp;lt;/p&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; development&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The contents after the HEAD tilte originate from your current working branch. After the angle brackets, Git tells us where (from which branch) the changes came from. A line with “=======” separates the two conflicting changes.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Now resolving them is a simple task. All you have to do is remove the angle markers and in place of them place the text that you need. The above text can simply be replaced with the following and the Merge Conflict is solved!&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;&amp;lt;p&amp;gt; This repository is the work of Salman Shah and Hrily&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now after you have done this, you need to mark your file as ‘resolved for Git Merge Conflicts’ To do that, you need to execute the command &lt;code class=&quot;highlighter-rouge&quot;&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;. In this case the command would be:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git add src/team.html&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;With this we have solved the problem of resolving Merge Conflicts in Git!&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This is all that you need to start using Git and GitHub in your projects and this brings us to the end of this small tutorial series on Git and GitHub!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Git" /><category term="GitHub" /><category term="Version Control" /><summary type="html">This post deals with the dreaded word of “Resolving Merge Conflicts” and how it isn’t as bad as we think it is! This often happens when multiple people work on the same branch or when multiple branches are in play and they don’t get pushed sequentially! The only thing you should remember in Git is you cannot break things. You can always go to your previous state and re-start your work again! It is saved as long as you push it properly! Also, Git Merge Conflicts only occur on local systems not on the Git Server, so in case you are facing a Merge Conflict it will not stop your project, just your progress will be halted.</summary></entry><entry><title type="html">Introduction to Git and GitHub - Part II</title><link href="http://localhost:4000/blog/introduction-to-git-part-2/" rel="alternate" type="text/html" title="Introduction to Git and GitHub - Part II" /><published>2017-02-23T00:00:00+05:30</published><updated>2017-02-23T00:00:00+05:30</updated><id>http://localhost:4000/blog/introduction-to-git-part-2</id><content type="html" xml:base="http://localhost:4000/blog/introduction-to-git-part-2/">&lt;ul&gt;
  &lt;li&gt;A lot of times it is difficult to coordinate changes in a project while using Version Control especially when there are more than one contributors in a particular repository! At such times it is important to use a particular feature of Git called &lt;strong&gt;branch&lt;/strong&gt; &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;what-are-branches-and-how-to-use-them&quot;&gt;What are branches and how to use them?&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/post2_img1.png&quot; alt=&quot;git branch commands&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Branches are a feature of Git used when multiple collaborators are working on the same project, but want to work on different parts of the project.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;This is where the concept of branches in Git is particularly useful. A branch is like a copy of the original code which runs parlallely with other branches in the code repository! The default branch in a GitHub repository is called &lt;strong&gt;master&lt;/strong&gt;. To create a new branch you need to execute the following command:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git checkout -b &amp;lt;branch_name&amp;gt;
Switched to a new branch 'salman'&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;In case you are looking to switch back to your &lt;strong&gt;master&lt;/strong&gt; branch on your local repository, type in the following commands to get back again:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git checkout master
git checkout &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;If you are looking to delete a branch first make sure you aren’t currently on that branch! Use &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt; to move to another branch and then use the following commands to delete the branch.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git branch -d &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;In case your branch is not being deleted because you have certain unmerged changes and you really want to delete them without merging your changes, you can use the following instructions!&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git branch -D &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;how-to-sync-your-branch-with-the-master-branch&quot;&gt;How to sync your branch with the Master branch&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;If you are looking to sync your branch with your master, as in update the online changes that someone else has made to the &lt;strong&gt;master&lt;/strong&gt; branch to your branch, type in the following commands:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git pull origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;P.S. This can be extended to all branches and isn’t restricted to the &lt;strong&gt;master&lt;/strong&gt; branch alone!&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git pull origin &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;how-to-push-branches-on-github&quot;&gt;How to push branches on GitHub&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/post2_img2.png&quot; alt=&quot;Create GitHub Account&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Once you have your local changes made and committed, it is essential for you to push them on GitHub so that ohers can review them as well! To do this you can simply push your branch on to GitHub just like you would push the master branch to GitHub!&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;After you’re done working on them use the following commands to push your new branch on to GitHub.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git add --all
git commit -m &quot;&amp;lt;your_message&amp;gt;&quot;
git push origin &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check out the next tutorial to see how to resolve Merge Conflicts as and when you encounter them using Git.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Git" /><category term="GitHub" /><category term="Version Control" /><summary type="html">A lot of times it is difficult to coordinate changes in a project while using Version Control especially when there are more than one contributors in a particular repository! At such times it is important to use a particular feature of Git called branch</summary></entry><entry><title type="html">Introduction to Git and GitHub - Part I</title><link href="http://localhost:4000/blog/introduction-to-git/" rel="alternate" type="text/html" title="Introduction to Git and GitHub - Part I" /><published>2017-02-17T00:00:00+05:30</published><updated>2017-02-17T00:00:00+05:30</updated><id>http://localhost:4000/blog/introduction-to-git</id><content type="html" xml:base="http://localhost:4000/blog/introduction-to-git/">&lt;h4 id=&quot;definition&quot;&gt;Definition&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/post1_img5.png&quot; alt=&quot;Create GitHub Account&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git is a version control system (VCS) for tracking changes in computer files and coordinating work on those files when working on projects that involve multiple people. To check if Git is installed in your system or not, or to check the version of Git in your system type in the following command!&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git --version&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Git is primarily used for software development, but it can be used to keep track of changes for any type of file/s. GitHub is a website which allows users to use Git and store their files online and keep a track of the changes in them as well as helping in coordinating work between different people who are connected online.&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GitHub is primarily used by large as well as small IT Companies as well as upcoming startups.&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-to-get-started&quot;&gt;How To Get Started?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;All you have to do if you are a Linux user to install Git is to install it via the &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt; command.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;sudo apt-get update
sudo apt-get install git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;And that is all that you need to do to get Git up and running in your system.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;After that you have to configure Git according to your settings. This is done via the &lt;code class=&quot;highlighter-rouge&quot;&gt;config --global&lt;/code&gt; command.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git config --global user.email &quot;sbs.191197@gmail.com&quot;
git config --global user.name &quot;Salman Shah&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;After that you are all set to go!&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;create-a-github-account&quot;&gt;Create a GitHub Account&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/post1_img1.png&quot; alt=&quot;Create GitHub Account&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Go to the address: &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; and then fill in the form which is given.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose a unique user-name that you can be identified with, your email address and your unique password.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That is all you need to create your GitHub account.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;make-your-first-commit&quot;&gt;Make your first commit&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/post1_img2.png&quot; alt=&quot;Create a New Repository&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Go to the &lt;a href=&quot;https://github.com/&quot;&gt;GitHub website&lt;/a&gt; and create a New Repository by clicking on the green ‘New Repository’ button to the right of the page.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After that do the following:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Add the Repository Name as &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-world&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Write the description as &lt;code class=&quot;highlighter-rouge&quot;&gt;First GitHub repository&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Make sure it is marked &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Check the &lt;code class=&quot;highlighter-rouge&quot;&gt;Initialize this repository with a README&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Finally click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Create Repository&lt;/code&gt; button and your new repository will be created!&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/post1_img3.png&quot; alt=&quot;Select Link Repository to clone&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now all you need to do is click on the Green Dropdown on your repository page called &lt;code class=&quot;highlighter-rouge&quot;&gt;Clone or download&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then copy the HTTPS or SSH link given over there via the ‘Copy to Clipboard’ button and then go to your Terminal.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following commands to your terminal.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git clone https://github.com/&amp;lt;your_name&amp;gt;/hello-world.git
cd hello-world&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Basically, you have to paste the HTTPS or SSH link that you’ve copied from the repository page and paste it after the &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; command.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that you have created a local instance of your repository on your computer. You can add/remove files in the repository like you normally would.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After making all the changes that you need to do, you can now push your changes online by the following commands.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/post1_img4.png&quot; alt=&quot;Pushing Changes to GitHub Account&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First save the changes that you made to the local repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git add --all&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Then create a new commit and add a message associated with it with the following command:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt; 
git commit -m &quot;Initial Commit&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Lastly ‘push’ your commits to your online repository with the following command:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;After this you will be asked for your login credentials which you have to enter and then your commit will be pushed!&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Congrats you have just finished adding your first commit!&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;things-to-remember&quot;&gt;Things To Remember&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This is just a basic tutorial to add files on GitHub.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check out the next two articles on how to use more advanced features of Git.&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Git" /><category term="GitHub" /><category term="Version Control" /><summary type="html">Definition</summary></entry></feed>